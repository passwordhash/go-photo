name: CI/CD

on:
    push:
    pull_request:

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v2

            -   name: Checkout protobuf repository
                uses: actions/checkout@v3
                with:
                    repository: passwordhash/protobuf-files
                    path: api

            -   name: Set up Go
                uses: actions/setup-go@v2
                with:
                    go-version: '1.24.1'

            -   name: Update PATH
                run: echo "${{ runner.workspace }}/bin" >> $GITHUB_PATH

            -   name: Install dependencies
                run: |
                    go mod download
                    make install-deps

            -   name: Protobuf&docs generation
                run: |
                    make generate-pb
                    make generate-docs

            -   name: Build tests
                run: make tests-build

            -   name: Run tests
                run: make run-tests

#    lint:
#        runs-on: ubuntu-latest
#        steps:
#            -   name: Checkout code
#                uses: actions/checkout@v2
#
#            -   name: Checkout protobuf repository
#                uses: actions/checkout@v3
#                with:
#                    repository: passwordhash/protobuf-files
#                    path: api
#
#            -   name: Set up Go
#                uses: actions/setup-go@v2
#                with:
#                    go-version: '1.24.1'
#
#            -   name: Update PATH
#                run: echo "${{ runner.workspace }}/bin" >> $GITHUB_PATH
#
#            -   name: Install dependencies
#                run: |
#                    go mod download
#                    make install-deps
#
#            -   name: Protobuf&docs generation
#                run: |
#                    make generate-pb
#                    make generate-docs
#
#            -   name: Run golangci-lint
#                uses: golangci/golangci-lint-action@v6

    build-and-push:
        needs:
            - test
        if: >-
            (github.event_name == 'push' && github.ref == 'refs/heads/master')
            || (github.event_name == 'pull_request' && github.base_ref == 'master')
        runs-on: ubuntu-latest
        steps:
            -   name: Login to Docker Hub
                uses: docker/login-action@v3
                with:
                    username: ${{ vars.DOCKERHUB_USERNAME }}
                    password: ${{ secrets.DOCKERHUB_TOKEN }}

            -   name: Checkout
                uses: actions/checkout@v2

            -   name: Checkout protobuf repository
                uses: actions/checkout@v3
                with:
                    repository: ${{ github.repository_owner }}/protobuf-files
                    path: api

            -   name: Set up Go
                uses: actions/setup-go@v2
                with:
                    go-version: '1.24.1'

            -   name: Install dependencies
                run: make install-deps

            -   name: Protobuf&docs generation
                run: |
                    make generate-pb
                    make generate-docs

            -   name: Set up QEMU
                uses: docker/setup-qemu-action@v3

            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v3

            -   name: Build and push
                uses: docker/build-push-action@v6
                with:
                    context: .
                    push: true
                    tags: |
                        ${{ github.repository }}:latest
                        ${{ github.repository }}:${{ vars.VERSION }}
                    no-cache: true

    deploy:
        needs: build-and-push
        if: >-
            (github.event_name == 'push' && github.ref == 'refs/heads/master')|| (github.event_name == 'pull_request' && github.base_ref == 'master')
        runs-on: ubuntu-latest
        env:
            VAULT_ADDR: http://vault.passwordhash.tech
            CONTAINER_NAME: go-photo
            CONTAINER_PORT: 2040
        steps:
            -   name: Run docker image
                uses: appleboy/ssh-action@v1.2.0
                with:
                    host: ${{ vars.SSH_HOST }}
                    username: ${{ vars.SSH_USER }}
                    key: ${{ secrets.SSH_KEY }}
                    passphrase: ${{ secrets.SSH_PASSPHRASE }}
#                   TODO: описать в readme работу с секретами Vault
                    script: |
                        export VAULT_ADDR=${{ env.VAULT_ADDR }}
                        vault kv get -format=json -mount=kv ${{ env.CONTAINER_NAME }} | \
                        jq -r '.data.data | to_entries[] | "\(.key)=\(.value)"' > .env
                        
                        echo "vault addr: ${{ env.VAULT_ADDR }}"
                        echo "container name: ${{ env.CONTAINER_NAME }}"
                        
                        docker pull ${{ github.repository }}:latest
                        docker stop ${{ env.CONTAINER_NAME }} || true
                        docker rm ${{ env.CONTAINER_NAME }} -f || true
                        docker run -d  \
                          --env-file .env \
                          -p 2040:${{ env.CONTAINER_PORT }} \
                          --name ${{ env.CONTAINER_NAME }} \
                          ${{ github.repository }}:latest
                        
                        rm -f .env
